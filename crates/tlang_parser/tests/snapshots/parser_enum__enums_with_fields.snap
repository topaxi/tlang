---
source: crates/tlang_parser/tests/parser_enum.rs
expression: "parse!(indoc! {\n        \"\n        enum Option {\n            Some { x },\n            None,\n        }\n        let x = Option::Some { x: 42 };\n    \"\n    })"
---
Node(
  ast_node: Module([
    Node(
      ast_node: EnumDeclaration(
        id: SymbolId(1),
        name: "Option",
        variants: [
          Node(
            ast_node: EnumVariant(
              name: "Some",
              named_fields: true,
              parameters: [
                Node(
                  ast_node: Identifier("x"),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 1,
                      column: 12,
                    ),
                    end: LineColumn(
                      line: 1,
                      column: 13,
                    ),
                  ),
                ),
              ],
            ),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 1,
                column: 5,
              ),
              end: LineColumn(
                line: 1,
                column: 15,
              ),
            ),
          ),
          Node(
            ast_node: EnumVariant(
              name: "None",
              named_fields: false,
              parameters: [],
            ),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 2,
                column: 5,
              ),
              end: LineColumn(
                line: 2,
                column: 9,
              ),
            ),
          ),
        ],
      ),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 3,
          column: 2,
        ),
      ),
    ),
    Node(
      ast_node: VariableDeclaration(
        id: SymbolId(2),
        pattern: Node(
          ast_node: Identifier("x"),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 4,
              column: 5,
            ),
            end: LineColumn(
              line: 4,
              column: 6,
            ),
          ),
        ),
        expression: Node(
          ast_node: Call(
            function: Node(
              ast_node: NestedIdentifier([
                "Option",
                "Some",
              ]),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 0,
                ),
                end: LineColumn(
                  line: 0,
                  column: 0,
                ),
              ),
            ),
            arguments: [
              Node(
                ast_node: Dict([
                  (Node(
                    ast_node: Identifier("x"),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 4,
                        column: 24,
                      ),
                      end: LineColumn(
                        line: 4,
                        column: 25,
                      ),
                    ),
                  ), Node(
                    ast_node: Literal(Integer(42)),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 4,
                        column: 27,
                      ),
                      end: LineColumn(
                        line: 4,
                        column: 29,
                      ),
                    ),
                  )),
                ]),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                ),
              ),
            ],
          ),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 4,
              column: 9,
            ),
            end: LineColumn(
              line: 4,
              column: 31,
            ),
          ),
        ),
        type_annotation: None,
      ),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 4,
          column: 1,
        ),
        end: LineColumn(
          line: 4,
          column: 32,
        ),
      ),
    ),
  ]),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
