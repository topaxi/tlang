---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"let x = { 1 + 2; };\")"
---
Module(
  id: NodeId(1),
  statements: [
    Stmt(
      id: NodeId(9),
      kind: Let(LetDeclaration(
        pattern: Pattern(
          id: NodeId(2),
          kind: Identifier(Ident(
            name: "x",
            span: Span(
              start: LineColumn(
                line: 0,
                column: 4,
              ),
              end: LineColumn(
                line: 0,
                column: 5,
              ),
            ),
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              line: 0,
              column: 4,
            ),
            end: LineColumn(
              line: 0,
              column: 5,
            ),
          ),
        ),
        expression: Expr(
          id: NodeId(7),
          kind: Block(Block(
            id: NodeId(8),
            statements: [
              Stmt(
                id: NodeId(3),
                kind: Expr(Expr(
                  id: NodeId(6),
                  kind: BinaryOp(BinaryOpExpression(
                    op: Add,
                    lhs: Expr(
                      id: NodeId(4),
                      kind: Literal(Integer(1)),
                      leading_comments: [],
                      trailing_comments: [],
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 10,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 11,
                        ),
                      ),
                    ),
                    rhs: Expr(
                      id: NodeId(5),
                      kind: Literal(Integer(2)),
                      leading_comments: [],
                      trailing_comments: [],
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 14,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 15,
                        ),
                      ),
                    ),
                  )),
                  leading_comments: [],
                  trailing_comments: [],
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 10,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 15,
                    ),
                  ),
                )),
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 10,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 16,
                  ),
                ),
                leading_comments: [],
                trailing_comments: [],
              ),
            ],
            expression: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 8,
              ),
              end: LineColumn(
                line: 0,
                column: 18,
              ),
            ),
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              line: 0,
              column: 8,
            ),
            end: LineColumn(
              line: 0,
              column: 18,
            ),
          ),
        ),
        type_annotation: None,
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 19,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
