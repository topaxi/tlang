---
source: crates/tlang_parser/tests/parser_fn.rs
expression: "parse!(\"fn foo() { let x = 1; x }\")"
---
Node(
  ast_node: Legacy(Module([
    Stmt(
      kind: FunctionDeclaration(FunctionDeclaration(
        id: SymbolId(1),
        name: Expr(
          kind: Identifier(Ident(
            name: "foo",
            span: Span(
              start: LineColumn(
                line: 0,
                column: 3,
              ),
              end: LineColumn(
                line: 0,
                column: 6,
              ),
            ),
          )),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 3,
            ),
            end: LineColumn(
              line: 0,
              column: 6,
            ),
          ),
        ),
        parameters: [],
        guard: None,
        return_type_annotation: None,
        body: Expr(
          kind: Block([
            Stmt(
              kind: Let(
                pattern: Pattern(
                  kind: Identifier(
                    id: SymbolId(2),
                    name: Ident(
                      name: "x",
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 15,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 16,
                        ),
                      ),
                    ),
                  ),
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 15,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 16,
                    ),
                  ),
                ),
                expression: Expr(
                  kind: Literal(Integer(1)),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 19,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 20,
                    ),
                  ),
                ),
                type_annotation: None,
              ),
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 11,
                ),
                end: LineColumn(
                  line: 0,
                  column: 21,
                ),
              ),
              symbol_table: None,
            ),
          ], Some(Expr(
            kind: Identifier(Ident(
              name: "x",
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 22,
                ),
                end: LineColumn(
                  line: 0,
                  column: 23,
                ),
              ),
            )),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 22,
              ),
              end: LineColumn(
                line: 0,
                column: 23,
              ),
            ),
          ))),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 0,
            ),
            end: LineColumn(
              line: 0,
              column: 0,
            ),
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 25,
        ),
      ),
      symbol_table: None,
    ),
  ])),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
