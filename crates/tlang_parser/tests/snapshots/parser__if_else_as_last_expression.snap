---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"fn main() { if true { 1 } else { 2 } }\")"
---
Module(
  id: NodeId(1),
  statements: [
    Stmt(
      id: NodeId(14),
      kind: FunctionDeclaration(FunctionDeclaration(
        id: NodeId(13),
        name: Expr(
          id: NodeId(2),
          kind: Path(Path(
            segments: [
              Ident(
                name: "main",
                span: Span(
                  start: LineColumn(
                    index: 3,
                    line: 0,
                    column: 3,
                  ),
                  end: LineColumn(
                    index: 7,
                    line: 0,
                    column: 7,
                  ),
                ),
              ),
            ],
            span: Span(
              start: LineColumn(
                index: 3,
                line: 0,
                column: 3,
              ),
              end: LineColumn(
                index: 7,
                line: 0,
                column: 7,
              ),
            ),
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              index: 3,
              line: 0,
              column: 3,
            ),
            end: LineColumn(
              index: 7,
              line: 0,
              column: 7,
            ),
          ),
        ),
        parameters: [],
        guard: None,
        return_type_annotation: None,
        body: Block(
          id: NodeId(12),
          statements: [],
          expression: Some(Expr(
            id: NodeId(11),
            kind: IfElse(IfElseExpression(
              condition: Expr(
                id: NodeId(4),
                kind: Literal(Boolean(true)),
                leading_comments: [],
                trailing_comments: [],
                span: Span(
                  start: LineColumn(
                    index: 15,
                    line: 0,
                    column: 15,
                  ),
                  end: LineColumn(
                    index: 19,
                    line: 0,
                    column: 19,
                  ),
                ),
              ),
              then_branch: Block(
                id: NodeId(7),
                statements: [],
                expression: Some(Expr(
                  id: NodeId(6),
                  kind: Literal(UnsignedInteger(1)),
                  leading_comments: [],
                  trailing_comments: [],
                  span: Span(
                    start: LineColumn(
                      index: 22,
                      line: 0,
                      column: 22,
                    ),
                    end: LineColumn(
                      index: 23,
                      line: 0,
                      column: 23,
                    ),
                  ),
                )),
                span: Span(
                  start: LineColumn(
                    index: 20,
                    line: 0,
                    column: 20,
                  ),
                  end: LineColumn(
                    index: 25,
                    line: 0,
                    column: 25,
                  ),
                ),
              ),
              else_branches: [
                ElseClause(
                  condition: None,
                  consequence: Block(
                    id: NodeId(10),
                    statements: [],
                    expression: Some(Expr(
                      id: NodeId(9),
                      kind: Literal(UnsignedInteger(2)),
                      leading_comments: [],
                      trailing_comments: [],
                      span: Span(
                        start: LineColumn(
                          index: 33,
                          line: 0,
                          column: 33,
                        ),
                        end: LineColumn(
                          index: 34,
                          line: 0,
                          column: 34,
                        ),
                      ),
                    )),
                    span: Span(
                      start: LineColumn(
                        index: 31,
                        line: 0,
                        column: 31,
                      ),
                      end: LineColumn(
                        index: 36,
                        line: 0,
                        column: 36,
                      ),
                    ),
                  ),
                ),
              ],
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 12,
                line: 0,
                column: 12,
              ),
              end: LineColumn(
                index: 36,
                line: 0,
                column: 36,
              ),
            ),
          )),
          span: Span(
            start: LineColumn(
              index: 10,
              line: 0,
              column: 10,
            ),
            end: LineColumn(
              index: 38,
              line: 0,
              column: 38,
            ),
          ),
        ),
        leading_comments: [],
        trailing_comments: [],
        span: Span(
          start: LineColumn(
            index: 0,
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            index: 38,
            line: 0,
            column: 38,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          index: 0,
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          index: 38,
          line: 0,
          column: 38,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
  ),
)
