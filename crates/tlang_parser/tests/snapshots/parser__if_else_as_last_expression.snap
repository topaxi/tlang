---
source: crates/tlang_parser/tests/parser.rs
expression: "parse!(\"fn main() { if true { 1 } else { 2 } }\")"
---
Node(
  ast_node: Module([
    Node(
      ast_node: FunctionSingleDeclaration(
        id: SymbolId(1),
        name: Node(
          ast_node: Identifier("main"),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 3,
            ),
            end: LineColumn(
              line: 0,
              column: 7,
            ),
          ),
        ),
        declaration: Node(
          ast_node: FunctionDeclaration(FunctionDeclaration(
            parameters: [],
            guard: None,
            return_type_annotation: None,
            body: Node(
              ast_node: Block([], Some(Node(
                ast_node: IfElse(
                  condition: Node(
                    ast_node: Literal(Boolean(true)),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 15,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 19,
                      ),
                    ),
                  ),
                  then_branch: Node(
                    ast_node: Block([], Some(Node(
                      ast_node: Literal(Integer(1)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 22,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 23,
                        ),
                      ),
                    ))),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 0,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 0,
                      ),
                    ),
                  ),
                  else_branch: Some(Node(
                    ast_node: Block([], Some(Node(
                      ast_node: Literal(Integer(2)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 33,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 34,
                        ),
                      ),
                    ))),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 0,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 0,
                      ),
                    ),
                  )),
                ),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 12,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 36,
                  ),
                ),
              ))),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 0,
                ),
                end: LineColumn(
                  line: 0,
                  column: 0,
                ),
              ),
            ),
          )),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 0,
            ),
            end: LineColumn(
              line: 0,
              column: 0,
            ),
          ),
        ),
      ),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 38,
        ),
      ),
    ),
  ]),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
