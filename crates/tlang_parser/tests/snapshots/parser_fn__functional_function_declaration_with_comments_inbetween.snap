---
source: crates/tlang_parser/tests/parser_fn.rs
expression: "parse!(indoc! {\n        \"\n        fn foo(1) { 1 }\n        // comment\n        fn foo(n) { n * 2 }\n    \"\n    })"
---
Node(
  ast_node: Program([
    Node(
      ast_node: FunctionDeclarations(
        id: SymbolId(3),
        name: Node(
          ast_node: Identifier("foo"),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 2,
              column: 4,
            ),
            end: LineColumn(
              line: 2,
              column: 7,
            ),
          ),
        ),
        declarations: [
          Node(
            ast_node: FunctionDeclaration(FunctionDeclaration(
              parameters: [
                Node(
                  ast_node: FunctionParameter(
                    id: SymbolId(1),
                    pattern: Node(
                      ast_node: Literal(Integer(1)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 7,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 8,
                        ),
                      ),
                    ),
                    type_annotation: None,
                  ),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 0,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 0,
                    ),
                  ),
                ),
              ],
              guard: None,
              return_type_annotation: None,
              body: Node(
                ast_node: Block([], Some(Node(
                  ast_node: Literal(Integer(1)),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 12,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 13,
                    ),
                  ),
                ))),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                ),
              ),
            )),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
          Node(
            ast_node: SingleLineComment(" comment"),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 1,
                column: 1,
              ),
              end: LineColumn(
                line: 1,
                column: 11,
              ),
            ),
          ),
          Node(
            ast_node: FunctionDeclaration(FunctionDeclaration(
              parameters: [
                Node(
                  ast_node: FunctionParameter(
                    id: SymbolId(2),
                    pattern: Node(
                      ast_node: Identifier("n"),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 2,
                          column: 8,
                        ),
                        end: LineColumn(
                          line: 2,
                          column: 9,
                        ),
                      ),
                    ),
                    type_annotation: None,
                  ),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 0,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 0,
                    ),
                  ),
                ),
              ],
              guard: None,
              return_type_annotation: None,
              body: Node(
                ast_node: Block([], Some(Node(
                  ast_node: BinaryOp(
                    op: Multiply,
                    lhs: Node(
                      ast_node: Identifier("n"),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 2,
                          column: 13,
                        ),
                        end: LineColumn(
                          line: 2,
                          column: 14,
                        ),
                      ),
                    ),
                    rhs: Node(
                      ast_node: Literal(Integer(2)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 2,
                          column: 17,
                        ),
                        end: LineColumn(
                          line: 2,
                          column: 18,
                        ),
                      ),
                    ),
                  ),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 2,
                      column: 13,
                    ),
                    end: LineColumn(
                      line: 2,
                      column: 18,
                    ),
                  ),
                ))),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                ),
              ),
            )),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
        ],
      ),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 2,
          column: 20,
        ),
      ),
    ),
  ]),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
