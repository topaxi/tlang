---
source: crates/tlang_parser/tests/parser.rs
expression: "parse!(\"if true { 1; } else { 2; }\")"
---
Module(
  statements: [
    Stmt(
      kind: Expr(Expr(
        kind: IfElse(
          condition: Expr(
            kind: Literal(Boolean(true)),
            leading_comments: [],
            trailing_comments: [],
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 3,
              ),
              end: LineColumn(
                line: 0,
                column: 7,
              ),
            ),
          ),
          then_branch: Expr(
            kind: Block(Block(
              statements: [
                Stmt(
                  kind: Expr(Expr(
                    kind: Literal(Integer(1)),
                    leading_comments: [],
                    trailing_comments: [],
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 10,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 11,
                      ),
                    ),
                  )),
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 10,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 12,
                    ),
                  ),
                  leading_comments: [],
                  trailing_comments: [],
                  symbol_table: None,
                ),
              ],
              expression: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 8,
                ),
                end: LineColumn(
                  line: 0,
                  column: 14,
                ),
              ),
              symbol_table: None,
            )),
            leading_comments: [],
            trailing_comments: [],
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
          else_branch: Some(Expr(
            kind: Block(Block(
              statements: [
                Stmt(
                  kind: Expr(Expr(
                    kind: Literal(Integer(2)),
                    leading_comments: [],
                    trailing_comments: [],
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 22,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 23,
                      ),
                    ),
                  )),
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 22,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 24,
                    ),
                  ),
                  leading_comments: [],
                  trailing_comments: [],
                  symbol_table: None,
                ),
              ],
              expression: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 20,
                ),
                end: LineColumn(
                  line: 0,
                  column: 26,
                ),
              ),
              symbol_table: None,
            )),
            leading_comments: [],
            trailing_comments: [],
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          )),
        ),
        leading_comments: [],
        trailing_comments: [],
        symbol_table: None,
        span: Span(
          start: LineColumn(
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            line: 0,
            column: 26,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 26,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
      symbol_table: None,
    ),
  ],
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
