---
source: crates/tlang_parser/tests/parser_if_let.rs
expression: "parse!(indoc! { \"\n        if let x = 1 {\n            x\n        }\n    \" })"
---
Node(
  ast_node: Program([
    Node(
      ast_node: ExpressionStatement(Node(
        ast_node: IfElse(
          condition: Node(
            ast_node: VariableDeclaration(
              id: SymbolId(1),
              pattern: Node(
                ast_node: Identifier("x"),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 7,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 8,
                  ),
                ),
              ),
              expression: Node(
                ast_node: Literal(Integer(1)),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 11,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 12,
                  ),
                ),
              ),
              type_annotation: None,
            ),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
          then_branch: Node(
            ast_node: Block([], Some(Node(
              ast_node: Identifier("x"),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 1,
                  column: 5,
                ),
                end: LineColumn(
                  line: 1,
                  column: 6,
                ),
              ),
            ))),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
          else_branch: None,
        ),
        symbol_table: None,
        span: Span(
          start: LineColumn(
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            line: 2,
            column: 2,
          ),
        ),
      )),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 2,
          column: 2,
        ),
      ),
    ),
  ]),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
