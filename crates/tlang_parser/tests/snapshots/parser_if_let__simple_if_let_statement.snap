---
source: crates/tlang_parser/tests/parser_if_let.rs
expression: "parse! (indoc! { \"\n        if let x = 1 {\n            x\n        }\n    \" })"
---
Module(
  id: NodeId(1),
  statements: [
    Stmt(
      id: NodeId(2),
      kind: Expr(Expr(
        id: NodeId(9),
        kind: IfElse(IfElseExpression(
          condition: Expr(
            id: NodeId(5),
            kind: Let(Pat(
              id: NodeId(3),
              kind: Identifier(Ident(
                name: "x",
                span: Span(
                  start: LineColumn(
                    index: 7,
                    line: 0,
                    column: 7,
                  ),
                  end: LineColumn(
                    index: 8,
                    line: 0,
                    column: 8,
                  ),
                ),
              )),
              leading_comments: [],
              trailing_comments: [],
              span: Span(
                start: LineColumn(
                  index: 7,
                  line: 0,
                  column: 7,
                ),
                end: LineColumn(
                  index: 8,
                  line: 0,
                  column: 8,
                ),
              ),
            ), Expr(
              id: NodeId(4),
              kind: Literal(UnsignedInteger(1)),
              leading_comments: [],
              trailing_comments: [],
              span: Span(
                start: LineColumn(
                  index: 11,
                  line: 0,
                  column: 11,
                ),
                end: LineColumn(
                  index: 12,
                  line: 0,
                  column: 12,
                ),
              ),
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 0,
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                index: 0,
                line: 0,
                column: 0,
              ),
            ),
          ),
          then_branch: Block(
            id: NodeId(8),
            statements: [],
            expression: Some(Expr(
              id: NodeId(7),
              kind: Path(Path(
                segments: [
                  Ident(
                    name: "x",
                    span: Span(
                      start: LineColumn(
                        index: 19,
                        line: 1,
                        column: 5,
                      ),
                      end: LineColumn(
                        index: 20,
                        line: 1,
                        column: 6,
                      ),
                    ),
                  ),
                ],
                span: Span(
                  start: LineColumn(
                    index: 19,
                    line: 1,
                    column: 5,
                  ),
                  end: LineColumn(
                    index: 20,
                    line: 1,
                    column: 6,
                  ),
                ),
              )),
              leading_comments: [],
              trailing_comments: [],
              span: Span(
                start: LineColumn(
                  index: 19,
                  line: 1,
                  column: 5,
                ),
                end: LineColumn(
                  index: 20,
                  line: 1,
                  column: 6,
                ),
              ),
            )),
            span: Span(
              start: LineColumn(
                index: 13,
                line: 0,
                column: 13,
              ),
              end: LineColumn(
                index: 22,
                line: 2,
                column: 2,
              ),
            ),
          ),
          else_branches: [],
        )),
        leading_comments: [],
        trailing_comments: [],
        span: Span(
          start: LineColumn(
            index: 0,
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            index: 22,
            line: 2,
            column: 2,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          index: 0,
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          index: 22,
          line: 2,
          column: 2,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
  ),
)
