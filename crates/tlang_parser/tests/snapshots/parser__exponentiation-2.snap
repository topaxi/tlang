---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"1 ** 2 * 3;\")"
---
Module(
  id: NodeId(1),
  statements: [
    Stmt(
      id: NodeId(2),
      kind: Expr(Expr(
        id: NodeId(7),
        kind: BinaryOp(BinaryOpExpression(
          op: Multiply,
          lhs: Expr(
            id: NodeId(5),
            kind: BinaryOp(BinaryOpExpression(
              op: Exponentiation,
              lhs: Expr(
                id: NodeId(3),
                kind: Literal(UnsignedInteger(1)),
                leading_comments: [],
                trailing_comments: [],
                span: Span(
                  start: LineColumn(
                    index: 0,
                    line: 0,
                    column: 0,
                  ),
                  end: LineColumn(
                    index: 1,
                    line: 0,
                    column: 1,
                  ),
                ),
              ),
              rhs: Expr(
                id: NodeId(4),
                kind: Literal(UnsignedInteger(2)),
                leading_comments: [],
                trailing_comments: [],
                span: Span(
                  start: LineColumn(
                    index: 5,
                    line: 0,
                    column: 5,
                  ),
                  end: LineColumn(
                    index: 6,
                    line: 0,
                    column: 6,
                  ),
                ),
              ),
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 0,
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                index: 0,
                line: 0,
                column: 0,
              ),
            ),
          ),
          rhs: Expr(
            id: NodeId(6),
            kind: Literal(UnsignedInteger(3)),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 9,
                line: 0,
                column: 9,
              ),
              end: LineColumn(
                index: 10,
                line: 0,
                column: 10,
              ),
            ),
          ),
        )),
        leading_comments: [],
        trailing_comments: [],
        span: Span(
          start: LineColumn(
            index: 0,
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            index: 10,
            line: 0,
            column: 10,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          index: 0,
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          index: 11,
          line: 0,
          column: 11,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
  ),
)
