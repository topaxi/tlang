---
source: crates/tlang_parser/tests/parser_fn.rs
expression: "parse!(\"fn foo() { fn bar() {} }\")"
---
Module(
  statements: [
    Stmt(
      kind: FunctionDeclaration(FunctionDeclaration(
        id: SymbolId(1),
        name: Expr(
          kind: Path(Path(
            segments: [
              Ident(
                name: "foo",
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 3,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 6,
                  ),
                ),
              ),
            ],
            span: Span(
              start: LineColumn(
                line: 0,
                column: 3,
              ),
              end: LineColumn(
                line: 0,
                column: 6,
              ),
            ),
          )),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 3,
            ),
            end: LineColumn(
              line: 0,
              column: 6,
            ),
          ),
        ),
        parameters: [],
        guard: None,
        return_type_annotation: None,
        body: Expr(
          kind: Block([], Some(Expr(
            kind: FunctionExpression(FunctionDeclaration(
              id: SymbolId(2),
              name: Expr(
                kind: Path(Path(
                  segments: [
                    Ident(
                      name: "bar",
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 14,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 17,
                        ),
                      ),
                    ),
                  ],
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 14,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 17,
                    ),
                  ),
                )),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 14,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 17,
                  ),
                ),
              ),
              parameters: [],
              guard: None,
              return_type_annotation: None,
              body: Expr(
                kind: Block([], None),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                ),
              ),
            )),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 11,
              ),
              end: LineColumn(
                line: 0,
                column: 22,
              ),
            ),
          ))),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 0,
            ),
            end: LineColumn(
              line: 0,
              column: 0,
            ),
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 24,
        ),
      ),
      symbol_table: None,
    ),
  ],
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
