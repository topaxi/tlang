---
source: crates/tlang_parser/tests/parser_dict.rs
expression: "parse! (r\"if let x = foo {}\")"
---
Module(
  id: 2,
  statements: [
    Stmt(
      id: 3,
      kind: Expr(Expr(
        id: 8,
        kind: IfElse(IfElseExpression(
          condition: Expr(
            id: 6,
            kind: Let(Pat(
              id: 4,
              kind: Identifier(Ident(
                name: "x",
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 7,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 8,
                  ),
                ),
              )),
              leading_comments: [],
              trailing_comments: [],
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 7,
                ),
                end: LineColumn(
                  line: 0,
                  column: 8,
                ),
              ),
            ), Expr(
              id: 5,
              kind: Path(Path(
                segments: [
                  Ident(
                    name: "foo",
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 11,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 14,
                      ),
                    ),
                  ),
                ],
                res: Res(
                  node_id: None,
                ),
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 11,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 14,
                  ),
                ),
              )),
              leading_comments: [],
              trailing_comments: [],
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 11,
                ),
                end: LineColumn(
                  line: 0,
                  column: 14,
                ),
              ),
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
          then_branch: Block(
            id: 7,
            statements: [],
            expression: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 15,
              ),
              end: LineColumn(
                line: 0,
                column: 17,
              ),
            ),
          ),
          else_branches: [],
        )),
        leading_comments: [],
        trailing_comments: [],
        span: Span(
          start: LineColumn(
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            line: 0,
            column: 17,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 17,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 17,
    ),
  ),
)
