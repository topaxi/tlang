---
source: crates/tlang_parser/tests/parser_fn.rs
expression: "parse!(indoc! {\n        \"\n        fn factorial(0) { return 1; }\n        fn factorial(n) { return n * factorial(n - 1); }\n    \"\n    })"
---
Node(
  ast_node: Program([
    Node(
      ast_node: FunctionDeclarations(
        id: SymbolId(3),
        name: Node(
          ast_node: Identifier("factorial"),
          symbol_table: None,
        ),
        declarations: [
          Node(
            ast_node: FunctionDeclaration(FunctionDeclaration(
              parameters: [
                Node(
                  ast_node: FunctionParameter(
                    id: SymbolId(1),
                    pattern: Node(
                      ast_node: Literal(Integer(0)),
                      symbol_table: None,
                    ),
                    type_annotation: None,
                  ),
                  symbol_table: None,
                ),
              ],
              guard: None,
              return_type_annotation: None,
              body: Node(
                ast_node: Block([
                  Node(
                    ast_node: ReturnStatement(Some(Node(
                      ast_node: Literal(Integer(1)),
                      symbol_table: None,
                    ))),
                    symbol_table: None,
                  ),
                ], None),
                symbol_table: None,
              ),
            )),
            symbol_table: None,
          ),
          Node(
            ast_node: FunctionDeclaration(FunctionDeclaration(
              parameters: [
                Node(
                  ast_node: FunctionParameter(
                    id: SymbolId(2),
                    pattern: Node(
                      ast_node: Identifier("n"),
                      symbol_table: None,
                    ),
                    type_annotation: None,
                  ),
                  symbol_table: None,
                ),
              ],
              guard: None,
              return_type_annotation: None,
              body: Node(
                ast_node: Block([
                  Node(
                    ast_node: ReturnStatement(Some(Node(
                      ast_node: BinaryOp(
                        op: Multiply,
                        lhs: Node(
                          ast_node: Identifier("n"),
                          symbol_table: None,
                        ),
                        rhs: Node(
                          ast_node: Call(
                            function: Node(
                              ast_node: Identifier("factorial"),
                              symbol_table: None,
                            ),
                            arguments: [
                              Node(
                                ast_node: BinaryOp(
                                  op: Subtract,
                                  lhs: Node(
                                    ast_node: Identifier("n"),
                                    symbol_table: None,
                                  ),
                                  rhs: Node(
                                    ast_node: Literal(Integer(1)),
                                    symbol_table: None,
                                  ),
                                ),
                                symbol_table: None,
                              ),
                            ],
                          ),
                          symbol_table: None,
                        ),
                      ),
                      symbol_table: None,
                    ))),
                    symbol_table: None,
                  ),
                ], None),
                symbol_table: None,
              ),
            )),
            symbol_table: None,
          ),
        ],
      ),
      symbol_table: None,
    ),
  ]),
  symbol_table: None,
)
