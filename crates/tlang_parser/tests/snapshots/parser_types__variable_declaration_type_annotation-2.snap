---
source: crates/tlang_parser/tests/parser_types.rs
expression: "parse!(\"let x: Option<i64> = 1;\")"
---
Node(
  ast_node: Legacy(Module([
    Node(
      ast_node: Legacy(VariableDeclaration(
        id: SymbolId(1),
        pattern: Node(
          ast_node: Legacy(Identifier("x")),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 4,
            ),
            end: LineColumn(
              line: 0,
              column: 5,
            ),
          ),
        ),
        expression: Node(
          ast_node: Legacy(Literal(Integer(1))),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 21,
            ),
            end: LineColumn(
              line: 0,
              column: 22,
            ),
          ),
        ),
        type_annotation: Some(Node(
          ast_node: Legacy(TypeAnnotation(
            name: Node(
              ast_node: Legacy(Identifier("Option")),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 7,
                ),
                end: LineColumn(
                  line: 0,
                  column: 13,
                ),
              ),
            ),
            parameters: [
              Node(
                ast_node: Legacy(TypeAnnotation(
                  name: Node(
                    ast_node: Legacy(Identifier("i64")),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 14,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 17,
                      ),
                    ),
                  ),
                  parameters: [],
                )),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 0,
                  ),
                ),
              ),
            ],
          )),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 0,
            ),
            end: LineColumn(
              line: 0,
              column: 0,
            ),
          ),
        )),
      )),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 23,
        ),
      ),
    ),
  ])),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
