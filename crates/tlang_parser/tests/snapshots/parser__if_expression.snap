---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"let x = if (true) { 1; } else { 2; };\")"
---
Module(
  statements: [
    Stmt(
      kind: Let(LetDeclaration(
        pattern: Pattern(
          kind: Identifier(
            id: SymbolId(1),
            name: Ident(
              name: "x",
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 4,
                ),
                end: LineColumn(
                  line: 0,
                  column: 5,
                ),
              ),
            ),
          ),
          span: Span(
            start: LineColumn(
              line: 0,
              column: 4,
            ),
            end: LineColumn(
              line: 0,
              column: 5,
            ),
          ),
        ),
        expression: Expr(
          kind: IfElse(IfElseExpression(
            condition: Expr(
              kind: Literal(Boolean(true)),
              leading_comments: [],
              trailing_comments: [],
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 11,
                ),
                end: LineColumn(
                  line: 0,
                  column: 17,
                ),
              ),
            ),
            then_branch: Expr(
              kind: Block(Block(
                statements: [
                  Stmt(
                    kind: Expr(Expr(
                      kind: Literal(Integer(1)),
                      leading_comments: [],
                      trailing_comments: [],
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 20,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 21,
                        ),
                      ),
                    )),
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 20,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 22,
                      ),
                    ),
                    leading_comments: [],
                    trailing_comments: [],
                    symbol_table: None,
                  ),
                ],
                expression: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 18,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 24,
                  ),
                ),
                symbol_table: None,
              )),
              leading_comments: [],
              trailing_comments: [],
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 0,
                ),
                end: LineColumn(
                  line: 0,
                  column: 0,
                ),
              ),
            ),
            else_branches: [
              ElseClause(
                condition: None,
                consequence: Expr(
                  kind: Block(Block(
                    statements: [
                      Stmt(
                        kind: Expr(Expr(
                          kind: Literal(Integer(2)),
                          leading_comments: [],
                          trailing_comments: [],
                          symbol_table: None,
                          span: Span(
                            start: LineColumn(
                              line: 0,
                              column: 32,
                            ),
                            end: LineColumn(
                              line: 0,
                              column: 33,
                            ),
                          ),
                        )),
                        span: Span(
                          start: LineColumn(
                            line: 0,
                            column: 32,
                          ),
                          end: LineColumn(
                            line: 0,
                            column: 34,
                          ),
                        ),
                        leading_comments: [],
                        trailing_comments: [],
                        symbol_table: None,
                      ),
                    ],
                    expression: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 30,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 36,
                      ),
                    ),
                    symbol_table: None,
                  )),
                  leading_comments: [],
                  trailing_comments: [],
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 0,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 0,
                    ),
                  ),
                ),
              ),
            ],
          )),
          leading_comments: [],
          trailing_comments: [],
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 8,
            ),
            end: LineColumn(
              line: 0,
              column: 36,
            ),
          ),
        ),
        type_annotation: None,
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 37,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
      symbol_table: None,
    ),
  ],
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
