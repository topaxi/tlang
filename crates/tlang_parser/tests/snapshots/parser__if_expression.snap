---
source: crates/tlang_parser/tests/parser.rs
expression: "parse!(\"let x = if (true) { 1; } else { 2; };\")"
---
Node(
  ast_node: Legacy(Module([
    Node(
      ast_node: Legacy(VariableDeclaration(
        id: SymbolId(1),
        pattern: Node(
          ast_node: Legacy(Identifier("x")),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 4,
            ),
            end: LineColumn(
              line: 0,
              column: 5,
            ),
          ),
        ),
        expression: Node(
          ast_node: Legacy(IfElse(
            condition: Node(
              ast_node: Legacy(Literal(Boolean(true))),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 11,
                ),
                end: LineColumn(
                  line: 0,
                  column: 17,
                ),
              ),
            ),
            then_branch: Node(
              ast_node: Legacy(Block([
                Node(
                  ast_node: Legacy(ExpressionStatement(Node(
                    ast_node: Legacy(Literal(Integer(1))),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 20,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 21,
                      ),
                    ),
                  ))),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 20,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 22,
                    ),
                  ),
                ),
              ], None)),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 0,
                ),
                end: LineColumn(
                  line: 0,
                  column: 0,
                ),
              ),
            ),
            else_branch: Some(Node(
              ast_node: Legacy(Block([
                Node(
                  ast_node: Legacy(ExpressionStatement(Node(
                    ast_node: Legacy(Literal(Integer(2))),
                    symbol_table: None,
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 32,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 33,
                      ),
                    ),
                  ))),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 32,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 34,
                    ),
                  ),
                ),
              ], None)),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 0,
                ),
                end: LineColumn(
                  line: 0,
                  column: 0,
                ),
              ),
            )),
          )),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 8,
            ),
            end: LineColumn(
              line: 0,
              column: 36,
            ),
          ),
        ),
        type_annotation: None,
      )),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 37,
        ),
      ),
    ),
  ])),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
