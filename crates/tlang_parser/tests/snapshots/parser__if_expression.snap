---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"let x = if (true) { 1; } else { 2; };\")"
---
Module(
  id: 2,
  statements: [
    Stmt(
      id: 12,
      kind: Let(LetDeclaration(
        pattern: Pat(
          id: 3,
          kind: Identifier(Ident(
            name: "x",
            span: Span(
              start: LineColumn(
                line: 0,
                column: 4,
              ),
              end: LineColumn(
                line: 0,
                column: 5,
              ),
            ),
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              line: 0,
              column: 4,
            ),
            end: LineColumn(
              line: 0,
              column: 5,
            ),
          ),
        ),
        expression: Expr(
          id: 11,
          kind: IfElse(IfElseExpression(
            condition: Expr(
              id: 4,
              kind: Literal(Boolean(true)),
              leading_comments: [],
              trailing_comments: [],
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 11,
                ),
                end: LineColumn(
                  line: 0,
                  column: 17,
                ),
              ),
            ),
            then_branch: Block(
              id: 7,
              statements: [
                Stmt(
                  id: 5,
                  kind: Expr(Expr(
                    id: 6,
                    kind: Literal(UnsignedInteger(1)),
                    leading_comments: [],
                    trailing_comments: [],
                    span: Span(
                      start: LineColumn(
                        line: 0,
                        column: 20,
                      ),
                      end: LineColumn(
                        line: 0,
                        column: 21,
                      ),
                    ),
                  )),
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 20,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 22,
                    ),
                  ),
                  leading_comments: [],
                  trailing_comments: [],
                ),
              ],
              expression: None,
              span: Span(
                start: LineColumn(
                  line: 0,
                  column: 18,
                ),
                end: LineColumn(
                  line: 0,
                  column: 24,
                ),
              ),
            ),
            else_branches: [
              ElseClause(
                condition: None,
                consequence: Block(
                  id: 10,
                  statements: [
                    Stmt(
                      id: 8,
                      kind: Expr(Expr(
                        id: 9,
                        kind: Literal(UnsignedInteger(2)),
                        leading_comments: [],
                        trailing_comments: [],
                        span: Span(
                          start: LineColumn(
                            line: 0,
                            column: 32,
                          ),
                          end: LineColumn(
                            line: 0,
                            column: 33,
                          ),
                        ),
                      )),
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 32,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 34,
                        ),
                      ),
                      leading_comments: [],
                      trailing_comments: [],
                    ),
                  ],
                  expression: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 30,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 36,
                    ),
                  ),
                ),
              ),
            ],
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              line: 0,
              column: 8,
            ),
            end: LineColumn(
              line: 0,
              column: 36,
            ),
          ),
        ),
        type_annotation: None,
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 37,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
