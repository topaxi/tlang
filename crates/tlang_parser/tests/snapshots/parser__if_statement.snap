---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"if (1 + 2) { 3 + 4; }\")"
---
Module(
  id: NodeId(1),
  statements: [
    Stmt(
      id: NodeId(2),
      kind: Expr(Expr(
        id: NodeId(11),
        kind: IfElse(IfElseExpression(
          condition: Expr(
            id: NodeId(5),
            kind: BinaryOp(BinaryOpExpression(
              op: Add,
              lhs: Expr(
                id: NodeId(3),
                kind: Literal(UnsignedInteger(1)),
                leading_comments: [],
                trailing_comments: [],
                span: Span(
                  start: LineColumn(
                    index: 4,
                    line: 0,
                    column: 4,
                  ),
                  end: LineColumn(
                    index: 5,
                    line: 0,
                    column: 5,
                  ),
                ),
              ),
              rhs: Expr(
                id: NodeId(4),
                kind: Literal(UnsignedInteger(2)),
                leading_comments: [],
                trailing_comments: [],
                span: Span(
                  start: LineColumn(
                    index: 8,
                    line: 0,
                    column: 8,
                  ),
                  end: LineColumn(
                    index: 9,
                    line: 0,
                    column: 9,
                  ),
                ),
              ),
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 3,
                line: 0,
                column: 3,
              ),
              end: LineColumn(
                index: 10,
                line: 0,
                column: 10,
              ),
            ),
          ),
          then_branch: Block(
            id: NodeId(10),
            statements: [
              Stmt(
                id: NodeId(6),
                kind: Expr(Expr(
                  id: NodeId(9),
                  kind: BinaryOp(BinaryOpExpression(
                    op: Add,
                    lhs: Expr(
                      id: NodeId(7),
                      kind: Literal(UnsignedInteger(3)),
                      leading_comments: [],
                      trailing_comments: [],
                      span: Span(
                        start: LineColumn(
                          index: 13,
                          line: 0,
                          column: 13,
                        ),
                        end: LineColumn(
                          index: 14,
                          line: 0,
                          column: 14,
                        ),
                      ),
                    ),
                    rhs: Expr(
                      id: NodeId(8),
                      kind: Literal(UnsignedInteger(4)),
                      leading_comments: [],
                      trailing_comments: [],
                      span: Span(
                        start: LineColumn(
                          index: 17,
                          line: 0,
                          column: 17,
                        ),
                        end: LineColumn(
                          index: 18,
                          line: 0,
                          column: 18,
                        ),
                      ),
                    ),
                  )),
                  leading_comments: [],
                  trailing_comments: [],
                  span: Span(
                    start: LineColumn(
                      index: 13,
                      line: 0,
                      column: 13,
                    ),
                    end: LineColumn(
                      index: 18,
                      line: 0,
                      column: 18,
                    ),
                  ),
                )),
                span: Span(
                  start: LineColumn(
                    index: 13,
                    line: 0,
                    column: 13,
                  ),
                  end: LineColumn(
                    index: 19,
                    line: 0,
                    column: 19,
                  ),
                ),
                leading_comments: [],
                trailing_comments: [],
              ),
            ],
            expression: None,
            span: Span(
              start: LineColumn(
                index: 11,
                line: 0,
                column: 11,
              ),
              end: LineColumn(
                index: 21,
                line: 0,
                column: 21,
              ),
            ),
          ),
          else_branches: [],
        )),
        leading_comments: [],
        trailing_comments: [],
        span: Span(
          start: LineColumn(
            index: 0,
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            index: 21,
            line: 0,
            column: 21,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          index: 0,
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          index: 21,
          line: 0,
          column: 21,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
  ),
)
