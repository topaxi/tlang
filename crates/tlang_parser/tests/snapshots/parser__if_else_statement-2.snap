---
source: crates/tlang_parser/tests/parser.rs
expression: "parse!(\"if (1 + 2) { 3 + 4; } else { 5 + 6; }\")"
---
Node(
  ast_node: Program([
    Node(
      ast_node: ExpressionStatement(Node(
        ast_node: IfElse(
          condition: Node(
            ast_node: BinaryOp(
              op: Add,
              lhs: Node(
                ast_node: Literal(Integer(1)),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 4,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 5,
                  ),
                ),
              ),
              rhs: Node(
                ast_node: Literal(Integer(2)),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 8,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 9,
                  ),
                ),
              ),
            ),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 3,
              ),
              end: LineColumn(
                line: 0,
                column: 10,
              ),
            ),
          ),
          then_branch: Node(
            ast_node: Block([
              Node(
                ast_node: ExpressionStatement(Node(
                  ast_node: BinaryOp(
                    op: Add,
                    lhs: Node(
                      ast_node: Literal(Integer(3)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 13,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 14,
                        ),
                      ),
                    ),
                    rhs: Node(
                      ast_node: Literal(Integer(4)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 17,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 18,
                        ),
                      ),
                    ),
                  ),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 13,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 18,
                    ),
                  ),
                )),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 13,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 19,
                  ),
                ),
              ),
            ], None),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          ),
          else_branch: Some(Node(
            ast_node: Block([
              Node(
                ast_node: ExpressionStatement(Node(
                  ast_node: BinaryOp(
                    op: Add,
                    lhs: Node(
                      ast_node: Literal(Integer(5)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 29,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 30,
                        ),
                      ),
                    ),
                    rhs: Node(
                      ast_node: Literal(Integer(6)),
                      symbol_table: None,
                      span: Span(
                        start: LineColumn(
                          line: 0,
                          column: 33,
                        ),
                        end: LineColumn(
                          line: 0,
                          column: 34,
                        ),
                      ),
                    ),
                  ),
                  symbol_table: None,
                  span: Span(
                    start: LineColumn(
                      line: 0,
                      column: 29,
                    ),
                    end: LineColumn(
                      line: 0,
                      column: 34,
                    ),
                  ),
                )),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 0,
                    column: 29,
                  ),
                  end: LineColumn(
                    line: 0,
                    column: 35,
                  ),
                ),
              ),
            ], None),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 0,
              ),
              end: LineColumn(
                line: 0,
                column: 0,
              ),
            ),
          )),
        ),
        symbol_table: None,
        span: Span(
          start: LineColumn(
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            line: 0,
            column: 37,
          ),
        ),
      )),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 37,
        ),
      ),
    ),
  ]),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
