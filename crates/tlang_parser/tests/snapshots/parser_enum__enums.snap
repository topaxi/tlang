---
source: crates/tlang_parser/tests/parser_enum.rs
expression: "parse!(indoc! {\n        \"\n        enum Option {\n            Some(x),\n            None,\n        }\n\n        let x = Option::Some(42);\n    \"\n    })"
---
Node(
  ast_node: Legacy(Module([
    Stmt(
      kind: EnumDeclaration(EnumDeclaration(
        id: SymbolId(1),
        name: Ident(
          name: "Option",
          span: Span(
            start: LineColumn(
              line: 0,
              column: 5,
            ),
            end: LineColumn(
              line: 0,
              column: 11,
            ),
          ),
        ),
        variants: [
          EnumVariant(
            name: Ident(
              name: "Some",
              span: Span(
                start: LineColumn(
                  line: 1,
                  column: 5,
                ),
                end: LineColumn(
                  line: 1,
                  column: 9,
                ),
              ),
            ),
            named_fields: false,
            parameters: [
              Ident(
                name: "x",
                span: Span(
                  start: LineColumn(
                    line: 1,
                    column: 10,
                  ),
                  end: LineColumn(
                    line: 1,
                    column: 11,
                  ),
                ),
              ),
            ],
            span: Span(
              start: LineColumn(
                line: 1,
                column: 5,
              ),
              end: LineColumn(
                line: 1,
                column: 12,
              ),
            ),
          ),
          EnumVariant(
            name: Ident(
              name: "None",
              span: Span(
                start: LineColumn(
                  line: 2,
                  column: 5,
                ),
                end: LineColumn(
                  line: 2,
                  column: 9,
                ),
              ),
            ),
            named_fields: false,
            parameters: [],
            span: Span(
              start: LineColumn(
                line: 2,
                column: 5,
              ),
              end: LineColumn(
                line: 2,
                column: 9,
              ),
            ),
          ),
        ],
      )),
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 3,
          column: 2,
        ),
      ),
      symbol_table: None,
    ),
    Stmt(
      kind: Let(
        pattern: Pattern(
          kind: Identifier(
            id: SymbolId(2),
            name: Ident(
              name: "x",
              span: Span(
                start: LineColumn(
                  line: 5,
                  column: 5,
                ),
                end: LineColumn(
                  line: 5,
                  column: 6,
                ),
              ),
            ),
          ),
          span: Span(
            start: LineColumn(
              line: 5,
              column: 5,
            ),
            end: LineColumn(
              line: 5,
              column: 6,
            ),
          ),
        ),
        expression: Expr(
          kind: Call(
            function: Expr(
              kind: Path(Path(
                segments: [
                  Ident(
                    name: "Option",
                    span: Span(
                      start: LineColumn(
                        line: 5,
                        column: 9,
                      ),
                      end: LineColumn(
                        line: 5,
                        column: 15,
                      ),
                    ),
                  ),
                  Ident(
                    name: "Some",
                    span: Span(
                      start: LineColumn(
                        line: 5,
                        column: 17,
                      ),
                      end: LineColumn(
                        line: 5,
                        column: 21,
                      ),
                    ),
                  ),
                ],
                span: Span(
                  start: LineColumn(
                    line: 5,
                    column: 9,
                  ),
                  end: LineColumn(
                    line: 5,
                    column: 15,
                  ),
                ),
              )),
              symbol_table: None,
              span: Span(
                start: LineColumn(
                  line: 5,
                  column: 9,
                ),
                end: LineColumn(
                  line: 5,
                  column: 21,
                ),
              ),
            ),
            arguments: [
              Expr(
                kind: Literal(Integer(42)),
                symbol_table: None,
                span: Span(
                  start: LineColumn(
                    line: 5,
                    column: 22,
                  ),
                  end: LineColumn(
                    line: 5,
                    column: 24,
                  ),
                ),
              ),
            ],
          ),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 5,
              column: 9,
            ),
            end: LineColumn(
              line: 5,
              column: 25,
            ),
          ),
        ),
        type_annotation: None,
      ),
      span: Span(
        start: LineColumn(
          line: 5,
          column: 1,
        ),
        end: LineColumn(
          line: 5,
          column: 26,
        ),
      ),
      symbol_table: None,
    ),
  ])),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
