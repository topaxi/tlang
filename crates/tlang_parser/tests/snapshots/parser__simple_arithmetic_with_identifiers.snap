---
source: crates/tlang_parser/tests/parser.rs
expression: "parse! (\"let x = 1; let y = 2; x + y;\")"
---
Module(
  id: NodeId(1),
  statements: [
    Stmt(
      id: NodeId(4),
      kind: Let(LetDeclaration(
        pattern: Pat(
          id: NodeId(2),
          kind: Identifier(Ident(
            name: "x",
            span: Span(
              start: LineColumn(
                index: 4,
                line: 0,
                column: 4,
              ),
              end: LineColumn(
                index: 5,
                line: 0,
                column: 5,
              ),
            ),
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              index: 4,
              line: 0,
              column: 4,
            ),
            end: LineColumn(
              index: 5,
              line: 0,
              column: 5,
            ),
          ),
        ),
        expression: Expr(
          id: NodeId(3),
          kind: Literal(UnsignedInteger(1)),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              index: 8,
              line: 0,
              column: 8,
            ),
            end: LineColumn(
              index: 9,
              line: 0,
              column: 9,
            ),
          ),
        ),
        type_annotation: None,
      )),
      span: Span(
        start: LineColumn(
          index: 0,
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          index: 10,
          line: 0,
          column: 10,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
    Stmt(
      id: NodeId(7),
      kind: Let(LetDeclaration(
        pattern: Pat(
          id: NodeId(5),
          kind: Identifier(Ident(
            name: "y",
            span: Span(
              start: LineColumn(
                index: 15,
                line: 0,
                column: 15,
              ),
              end: LineColumn(
                index: 16,
                line: 0,
                column: 16,
              ),
            ),
          )),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              index: 15,
              line: 0,
              column: 15,
            ),
            end: LineColumn(
              index: 16,
              line: 0,
              column: 16,
            ),
          ),
        ),
        expression: Expr(
          id: NodeId(6),
          kind: Literal(UnsignedInteger(2)),
          leading_comments: [],
          trailing_comments: [],
          span: Span(
            start: LineColumn(
              index: 19,
              line: 0,
              column: 19,
            ),
            end: LineColumn(
              index: 20,
              line: 0,
              column: 20,
            ),
          ),
        ),
        type_annotation: None,
      )),
      span: Span(
        start: LineColumn(
          index: 11,
          line: 0,
          column: 11,
        ),
        end: LineColumn(
          index: 21,
          line: 0,
          column: 21,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
    Stmt(
      id: NodeId(8),
      kind: Expr(Expr(
        id: NodeId(11),
        kind: BinaryOp(BinaryOpExpression(
          op: Add,
          lhs: Expr(
            id: NodeId(9),
            kind: Path(Path(
              segments: [
                Ident(
                  name: "x",
                  span: Span(
                    start: LineColumn(
                      index: 22,
                      line: 0,
                      column: 22,
                    ),
                    end: LineColumn(
                      index: 23,
                      line: 0,
                      column: 23,
                    ),
                  ),
                ),
              ],
              span: Span(
                start: LineColumn(
                  index: 22,
                  line: 0,
                  column: 22,
                ),
                end: LineColumn(
                  index: 23,
                  line: 0,
                  column: 23,
                ),
              ),
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 22,
                line: 0,
                column: 22,
              ),
              end: LineColumn(
                index: 23,
                line: 0,
                column: 23,
              ),
            ),
          ),
          rhs: Expr(
            id: NodeId(10),
            kind: Path(Path(
              segments: [
                Ident(
                  name: "y",
                  span: Span(
                    start: LineColumn(
                      index: 26,
                      line: 0,
                      column: 26,
                    ),
                    end: LineColumn(
                      index: 27,
                      line: 0,
                      column: 27,
                    ),
                  ),
                ),
              ],
              span: Span(
                start: LineColumn(
                  index: 26,
                  line: 0,
                  column: 26,
                ),
                end: LineColumn(
                  index: 27,
                  line: 0,
                  column: 27,
                ),
              ),
            )),
            leading_comments: [],
            trailing_comments: [],
            span: Span(
              start: LineColumn(
                index: 26,
                line: 0,
                column: 26,
              ),
              end: LineColumn(
                index: 27,
                line: 0,
                column: 27,
              ),
            ),
          ),
        )),
        leading_comments: [],
        trailing_comments: [],
        span: Span(
          start: LineColumn(
            index: 22,
            line: 0,
            column: 22,
          ),
          end: LineColumn(
            index: 27,
            line: 0,
            column: 27,
          ),
        ),
      )),
      span: Span(
        start: LineColumn(
          index: 22,
          line: 0,
          column: 22,
        ),
        end: LineColumn(
          index: 28,
          line: 0,
          column: 28,
        ),
      ),
      leading_comments: [],
      trailing_comments: [],
    ),
  ],
  span: Span(
    start: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      index: 0,
      line: 0,
      column: 0,
    ),
  ),
)
