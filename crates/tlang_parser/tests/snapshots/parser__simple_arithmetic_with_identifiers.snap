---
source: crates/tlang_parser/tests/parser.rs
expression: "parse!(\"let x = 1; let y = 2; x + y;\")"
---
Node(
  ast_node: Program([
    Node(
      ast_node: VariableDeclaration(
        id: SymbolId(1),
        pattern: Node(
          ast_node: Identifier("x"),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 0,
            ),
            end: LineColumn(
              line: 0,
              column: 0,
            ),
          ),
        ),
        expression: Node(
          ast_node: Literal(Integer(1)),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 8,
            ),
            end: LineColumn(
              line: 0,
              column: 9,
            ),
          ),
        ),
        type_annotation: None,
      ),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 0,
        ),
        end: LineColumn(
          line: 0,
          column: 10,
        ),
      ),
    ),
    Node(
      ast_node: VariableDeclaration(
        id: SymbolId(2),
        pattern: Node(
          ast_node: Identifier("y"),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 0,
            ),
            end: LineColumn(
              line: 0,
              column: 0,
            ),
          ),
        ),
        expression: Node(
          ast_node: Literal(Integer(2)),
          symbol_table: None,
          span: Span(
            start: LineColumn(
              line: 0,
              column: 19,
            ),
            end: LineColumn(
              line: 0,
              column: 20,
            ),
          ),
        ),
        type_annotation: None,
      ),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 11,
        ),
        end: LineColumn(
          line: 0,
          column: 21,
        ),
      ),
    ),
    Node(
      ast_node: ExpressionStatement(Node(
        ast_node: BinaryOp(
          op: Add,
          lhs: Node(
            ast_node: Identifier("x"),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 22,
              ),
              end: LineColumn(
                line: 0,
                column: 23,
              ),
            ),
          ),
          rhs: Node(
            ast_node: Identifier("y"),
            symbol_table: None,
            span: Span(
              start: LineColumn(
                line: 0,
                column: 26,
              ),
              end: LineColumn(
                line: 0,
                column: 27,
              ),
            ),
          ),
        ),
        symbol_table: None,
        span: Span(
          start: LineColumn(
            line: 0,
            column: 0,
          ),
          end: LineColumn(
            line: 0,
            column: 0,
          ),
        ),
      )),
      symbol_table: None,
      span: Span(
        start: LineColumn(
          line: 0,
          column: 22,
        ),
        end: LineColumn(
          line: 0,
          column: 28,
        ),
      ),
    ),
  ]),
  symbol_table: None,
  span: Span(
    start: LineColumn(
      line: 0,
      column: 0,
    ),
    end: LineColumn(
      line: 0,
      column: 0,
    ),
  ),
)
