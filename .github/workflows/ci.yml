name: Build, Test and Deploy

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Add cache for cargo
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            # Taken from <https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci>.
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            # contains package information of crates installed via `cargo install`.
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            # Cache build targets to avoid rebuilds in case not all crates
            # changed. Especially useful while working on playground/non-rust
            # code.
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-4
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install rustup-toolchain-install-master
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          cargo install -f rustup-toolchain-install-master
          cargo install -f cargo-nextest
          cargo install -f wasm-bindgen-cli --version $(grep -oP 'wasm-bindgen = "=\K[^"]+' crates/tlang_bindings_js/Cargo.toml)
          cargo install -f wasm-pack

      - name: Install wasm-bindgen-cli
        run: |
          REQUIRED_VERSION=$(grep -oP 'wasm-bindgen = "=\K[^"]+' crates/tlang_bindings_js/Cargo.toml)
          INSTALLED_VERSION=$(wasm-bindgen --version 2>/dev/null | awk '{print $2}')

          if [ "$INSTALLED_VERSION" != "$REQUIRED_VERSION" ]; then
              cargo install -f wasm-bindgen-cli --version "$REQUIRED_VERSION"
          else
              echo "wasm-bindgen-cli is already up to date ($INSTALLED_VERSION)."
          fi

      - name: Install wasm toolchain
        run: |
          rustup target add wasm32-unknown-unknown

      - name: Show Rust version
        run: |
          rustup show
          rustc -Vv
          cargo -V

      - name: cargo-nextest
        run: cargo nextest run --profile=ci

      - uses: actions/setup-node@v4
        with:
          node-version: '23.6.1'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Test Runner
        run: make test

      - name: Test JS bindings
        run: make test-bindings-js

      - name: Install binaryen
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_119/binaryen-version_119-x86_64-linux.tar.gz
          tar xvzf binaryen-version_119-x86_64-linux.tar.gz

      - name: Install playground dependencies
        run: npm ci

      - name: Lint playground
        run: npm run lint

      - name: lit-analyzer
        run: npx lit-analyzer src
        working-directory: ./tlang-playground

      - name: TypeCheck playground
        run: npm run typecheck

      - name: Build playground
        run: |
          PATH=$(pwd)/binaryen-version_119/bin:$PATH
          npm run build -- -- --base=/tlang

      - name: Upload artifact
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: actions/upload-pages-artifact@v3
        with:
          path: tlang-playground/dist/

  deploy-pages:
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    runs-on: ubuntu-latest
    needs: ['build']

    permissions:
      actions: read
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
